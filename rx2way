//Simple RFM12B wireless demo - Receiver - no ack
//Glyn Hudson openenergymonitor.org GNU GPL V3 12/4/12
//Credit to JCW from Jeelabs.org for RFM12 

#include <JeeLib.h>

#define myNodeID 30          //node ID of Rx (range 0-30) 
#define network     210      //network group (can be in the range 1-250).
#define freq RF12_433MHZ     //Freq of RF12B can be RF12_433MHZ, RF12_868MHZ or RF12_915MHZ. Match freq to module

typedef struct { int tx1, tx2, rx1, rx2; } PayloadTX;      // create structure - a neat way of packaging data for RF comms
PayloadTX test1, test2;  

const int test1_NodeID=10;            //emonTx node ID

void setup() {
  
  rf12_initialize(myNodeID,freq,network);   //Initialize RFM12 with settings defined above  
  Serial.begin(9600); 
  Serial.println("RF12B demo Receiver - Simple demo"); 
  
 Serial.print("Node: "); 
 Serial.print(myNodeID); 
 Serial.print(" Freq: "); 
 if (freq == RF12_433MHZ) Serial.print("433Mhz");
 if (freq == RF12_868MHZ) Serial.print("868Mhz");
 if (freq == RF12_915MHZ) Serial.print("915Mhz"); 
 Serial.print(" Network: "); 
 Serial.println(network);
}

void loop() {
  recieve;
  transmit;
}

void recieve()
{ 
 if (rf12_recvDone()){    
  if (rf12_crc == 0 && (rf12_hdr & RF12_HDR_CTL) == 0) {
    
    int node_id = (rf12_hdr & 0x1F);		  //extract nodeID from payload
        
    if (node_id == test1_NodeID)  {             //check data is coming from node with the corrct ID
        test1=*(PayloadTX*) rf12_data;            // Extract the data from the payload 
       Serial.print("test1: "); Serial.println(test1.rx1); 
       Serial.print("test1-2: "); Serial.println(test1.rx2); 
       Serial.println("  "); 
  }
 }
}
}

void transmit()
{
  test2.tx1 = test2.tx1+3;
  test2.tx2 = test2.tx2+4;
 
  int i = 0; while (!rf12_canSend() && i<10) {rf12_recvDone(); i++;}
    rf12_sendStart(0, &test2, sizeof test2);
    
  Serial.print("test2: "); Serial.println(test2.tx1); 
  Serial.print("test2-2: "); Serial.println(test2.tx2); 
  Serial.println("  "); 
         
  delay(2000);
}
